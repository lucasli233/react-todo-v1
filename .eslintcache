[{"/home/oblivion2333/react-todo-v1/src/components/Todo.js":"1","/home/oblivion2333/react-todo-v1/src/components/TodoForm.js":"2","/home/oblivion2333/react-todo-v1/src/App.tsx":"3","/home/oblivion2333/react-todo-v1/src/components/TodoList.js":"4"},{"size":1063,"mtime":1610511215520,"results":"5","hashOfConfig":"6"},{"size":1399,"mtime":1610511016980,"results":"7","hashOfConfig":"6"},{"size":328,"mtime":1610426349140,"results":"8","hashOfConfig":"6"},{"size":1713,"mtime":1610524172220,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"12"},"t1opkz",{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},{"filePath":"16","messages":"17","errorCount":1,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"/home/oblivion2333/react-todo-v1/src/components/Todo.js",["20","21"],"import React, { useEffect, useState } from \"react\";\nimport TodoForm from \"./TodoForm\";\nimport TodoList from \"./TodoList\";\nimport { BiTrash, BiEdit } from \"react-icons/bi\";\n\nfunction Todo({ todos, completeTodo, removeTodo, updateTodo }) {\n  const [edit, setEdit] = useState({\n    id: null,\n    value: \"\",\n  });\n\n  const submitUpdate = (value) => {\n    updateTodo(edit.id, value);\n    setEdit({ id: null, value: \"\" });\n  };\n\n  if (edit.id) {\n    return <TodoForm edit={edit} onSubmit={submitUpdate} />;\n  }\n\n  return todos.map((todo, index) => (\n    <div\n      className={todo.isComplete ? \"todo-row complete\" : \"todo-row\"}\n      key={index}\n    >\n      <div key={todo.id} onClick={() => completeTodo(todo.id)}>\n        {todo.text}\n      </div>\n      <div className=\"icons\">\n        <BiEdit\n          onClick={() => setEdit({ id: todo.id, value: todo.text })}\n          className=\"edit-icon\"\n        />\n        <BiTrash\n          onClick={() => removeTodo(todo.id)}\n          className=\"delete-icon\"\n        />\n      </div>\n    </div>\n  ));\n}\n\nexport default Todo;\n","/home/oblivion2333/react-todo-v1/src/components/TodoForm.js",["22"],"import React, { useState, useEffect, useRef } from \"react\";\nimport { formatDiagnostic } from \"typescript\";\n//rfce\n\nfunction TodoForm(props) {\n  const [input, setInput] = useState(props.edit ? props.edit.value : \"\");\n\n  //auto focus on start up or after edit\n  const inputRef = useRef(null);\n  useEffect(() => {\n    inputRef.current.focus();\n  });\n\n  const handleChange = (e) => {\n    setInput(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    props.onSubmit({\n      id: Math.floor(Math.random() * 10000),\n      text: input,\n    });\n\n    setInput(\"\");\n  };\n\n  return (\n    <form className=\"todo-form\" onSubmit={handleSubmit}>\n      {props.edit ? (\n        <>\n          <input\n            type=\"text\"\n            placeholder=\"Update task\"\n            value={input}\n            name=\"text\"\n            className=\"todo-input edit\"\n            onChange={handleChange}\n            ref={inputRef}\n          />\n          <button className=\"todo-button edit\">Update</button>\n        </>\n      ) : (\n        <>\n          <input\n            type=\"text\"\n            placeholder=\"Add a todo\"\n            value={input}\n            name=\"text\"\n            className=\"todo-input\"\n            onChange={handleChange}\n            ref={inputRef}\n          />\n          <button className=\"todo-button\">Add todo</button>\n        </>\n      )}\n    </form>\n  );\n}\n\nexport default TodoForm;\n","/home/oblivion2333/react-todo-v1/src/App.tsx",["23","24","25","26"],"/home/oblivion2333/react-todo-v1/src/components/TodoList.js",[],{"ruleId":"27","severity":1,"message":"28","line":1,"column":17,"nodeType":"29","messageId":"30","endLine":1,"endColumn":26},{"ruleId":"27","severity":1,"message":"31","line":3,"column":8,"nodeType":"29","messageId":"30","endLine":3,"endColumn":16},{"ruleId":"27","severity":1,"message":"32","line":2,"column":10,"nodeType":"29","messageId":"30","endLine":2,"endColumn":26},{"ruleId":"33","severity":1,"message":"34","line":4,"column":8,"nodeType":"29","messageId":"30","endLine":4,"endColumn":16},{"ruleId":"33","severity":1,"message":"35","line":8,"column":10,"nodeType":"29","messageId":"30","endLine":8,"endColumn":15},{"ruleId":"33","severity":1,"message":"36","line":8,"column":17,"nodeType":"29","messageId":"30","endLine":8,"endColumn":25},{"ruleId":"37","severity":2,"message":"38","line":10,"column":3,"nodeType":"39","messageId":"40","endLine":10,"endColumn":12},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","'TodoList' is defined but never used.","'formatDiagnostic' is defined but never used.","@typescript-eslint/no-unused-vars","'TodoForm' is defined but never used.","'todos' is assigned a value but never used.","'setTodos' is assigned a value but never used.","@typescript-eslint/no-unused-expressions","Expected an assignment or function call and instead saw an expression.","ExpressionStatement","unusedExpression"]